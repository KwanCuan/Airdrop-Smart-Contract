```solidity pragma solidity ^0.8.0; 
contract Airdrop { mapping(address => bool) 
public whitelist; 
bytes32 public merkleRoot; 

constructor(bytes32 _merkleRoot) { merkleRoot = _merkleRoot; } 
function addToWhitelist(address[] calldata addresses) external { for (uint256 i = 0; i < addresses.length; i++) { whitelist[addresses[i]] = true; } } 
function removeFromWhitelist(address[] calldata addresses) external { for (uint256 i = 0; i < addresses.length; i++) { whitelist[addresses[i]] = false; } } 
function claimTokens(uint256 amount, bytes32[] calldata proof) external { require(whitelist[msg.sender], "Address not whitelisted"); require(verifyProof(proof, getNodeHash(msg.sender)), "Invalid proof"); 

// Perform token transfer or any other desired action // ... } 
function verifyProof(bytes32[] calldata proof, bytes32 leaf) 
internal view returns (bool) { bytes32 computedHash = leaf; for (uint256 i = 0; i < proof.length; i++) { bytes32 proofElement = proof[i]; 
if (computedHash < proofElement) { computedHash = keccak256(abi.encodePacked(computedHash, proofElement)); } 
else { computedHash = keccak256(abi.encodePacked(proofElement, computedHash)); } } return computedHash == merkleRoot; } 
function getNodeHash(address addr) internal pure returns (bytes32) { return keccak256(abi.encodePacked(addr)); } } ```
